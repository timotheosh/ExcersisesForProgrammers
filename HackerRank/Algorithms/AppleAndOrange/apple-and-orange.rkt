#lang racket

(let ((sams-house (map string->number (string-split (read-line))))
      (trees (map string->number (string-split (read-line))))
      (garbage (read-line))
      (apples (map string->number (string-split (read-line))))
      (oranges (map string->number (string-split (read-line)))))
  (let ((apple-tree (first trees))
        (orange-tree (second trees))
        (apple-hits 0)
        (orange-hits 0))
    (for ([a apples])
      (when (and (>= (+ a apple-tree) (first sams-house))
                 (<= (+ a apple-tree) (second sams-house)))
        (set! apple-hits (+ apple-hits 1))))
    (for ([o oranges])
      (when (and (>= (+ o orange-tree) (first sams-house))
                 (<= (+ o orange-tree) (second sams-house)))
        (set! orange-hits (+ orange-hits 1))))
    (display (format "~A~%" apple-hits))
    (display (format "~A~%" orange-hits))))
