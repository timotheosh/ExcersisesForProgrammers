#lang racket

(define (between-two-sets a b)
  (let ((nums '()))
    (for ([x (in-range (first (sort b <)) 0 -1)])
      (let ((x1 #t)
            (x2 #t))
        (for ([i a])
          (when (not (= (modulo x i) 0))
            (set! x1 #f)))
        (for ([i b])
          (when (not (= (modulo i x) 0))
            (set! x2 #f)))
        (when (and (not (false? x1))
                   (not (false? x2)))
          (set! nums (cons x nums)))))
    nums))

(define garbage (read-line))
(let ((a (map string->number (string-split (read-line))))
      (b (map string->number (string-split (read-line)))))
  (display (format "~A~%" (length (between-two-sets a b)))))
